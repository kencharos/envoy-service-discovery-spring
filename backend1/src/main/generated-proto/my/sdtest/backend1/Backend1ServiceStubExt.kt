package my.sdtest.backend1

import io.rouz.grpc.*
import my.sdtest.backend1.Backend1ServiceGrpc.Backend1ServiceStub

import kotlinx.coroutines.channels.ReceiveChannel
import kotlin.coroutines.suspendCoroutine

/**
 * Kotlin extension functions for [my.sdtest.backend1.Backend1ServiceGrpc.Backend1ServiceStub]
 *
 * Generated by gRPC Kotlin generator
 * Source: backend1.proto
 */




inline suspend fun Backend1ServiceStub.helloBackend1(request: my.sdtest.backend1.B1Request): my.sdtest.backend1.B1Response {
    return suspendCoroutine {
        helloBackend1(request, ContinuationStreamObserver(it))
    }
}



fun Backend1ServiceStub.helloBackend1Stream(): ManyToManyCall<my.sdtest.backend1.B1Request, my.sdtest.backend1.B1Response> {
    val responseChannel = StreamObserverChannel<my.sdtest.backend1.B1Response>()
    val requestObserver = helloBackend1Stream(responseChannel)
    return ManyToManyCall(requestObserver, responseChannel)
}
