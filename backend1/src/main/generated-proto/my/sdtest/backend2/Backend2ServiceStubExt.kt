package my.sdtest.backend2

import io.rouz.grpc.ContinuationStreamObserver
import io.rouz.grpc.ManyToManyCall
import io.rouz.grpc.StreamObserverChannel
import my.sdtest.backend2.Backend2ServiceGrpc.Backend2ServiceStub
import kotlin.coroutines.suspendCoroutine

/**
 * Kotlin extension functions for [my.sdtest.backend2.Backend2ServiceGrpc.Backend2ServiceStub]
 *
 * Generated by gRPC Kotlin generator
 * Source: backend2.proto
 */




inline suspend fun Backend2ServiceStub.helloBackend2(request: my.sdtest.backend2.B2Request): my.sdtest.backend2.B2Response {
    return suspendCoroutine {
        helloBackend2(request, ContinuationStreamObserver(it))
    }
}



fun Backend2ServiceStub.helloBackend2Stream(): ManyToManyCall<my.sdtest.backend2.B2Request, my.sdtest.backend2.B2Response> {
    val responseChannel = StreamObserverChannel<my.sdtest.backend2.B2Response>()
    val requestObserver = helloBackend2Stream(responseChannel)
    return ManyToManyCall(requestObserver, responseChannel)
}
